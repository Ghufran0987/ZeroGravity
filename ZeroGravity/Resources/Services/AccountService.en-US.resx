<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountNotFound" xml:space="preserve">
    <value>Account not found</value>
  </data>
  <data name="AccountNotVerified" xml:space="preserve">
    <value>Account not verified</value>
  </data>
  <data name="ForgotPasswordHeader" xml:space="preserve">
    <value>&lt;h4&gt;Email Already Registered&lt;/h4&gt;&lt;p&gt;Your email &lt;strong&gt;{0}&lt;/strong&gt; is already registered.&lt;/p&gt;</value>
  </data>
  <data name="ForgotPasswordMessage1" xml:space="preserve">
    <value>If you don't know your password please visit the &lt;a href=""{0}/account/forgot-password""&gt;forgot password&lt;/a&gt; page.</value>
  </data>
  <data name="ForgotPasswordMessage2" xml:space="preserve">
    <value>If you don't know your password you can reset it via the &lt;code&gt;/accounts/forgot-password&lt;/code&gt; api route.</value>
  </data>
  <data name="ForgotPasswordSubject" xml:space="preserve">
    <value>Miboko - Email Already Registered</value>
  </data>
  <data name="InvalidToken" xml:space="preserve">
    <value>Invalid token</value>
  </data>
  <data name="MailAlreadyRegistered" xml:space="preserve">
    <value>Email '{0}' is already registered</value>
  </data>
  <data name="MailAlreadyTaken" xml:space="preserve">
    <value>Email '{0}' is already taken</value>
  </data>
  <data name="MailOrPasswordIncorrect" xml:space="preserve">
    <value>Email or password is incorrect.</value>
  </data>
  <data name="PasswordNewEmpty" xml:space="preserve">
    <value>New password cannot be empty.</value>
  </data>
  <data name="PasswordNewNotMatch" xml:space="preserve">
    <value>Passwords must match!</value>
  </data>
  <data name="PasswordOldWrong" xml:space="preserve">
    <value>The password you provided is invalid.</value>
  </data>
  <data name="PasswordTooShort" xml:space="preserve">
    <value>For your own security, please choose a password with a minimum length of {0} characters.</value>
  </data>
  <data name="ProfileImageUploadFailed" xml:space="preserve">
    <value>Uploading profile image failed.</value>
  </data>
  <data name="ResetPasswordHeader" xml:space="preserve">
    <value>&lt;h4&gt;Reset Password&lt;/h4&gt;</value>
  </data>
  <data name="ResetPasswordMessage1" xml:space="preserve">
    <value>Please click the below link to reset your password, the link will be valid for 1 day:</value>
  </data>
  <data name="ResetPasswordMessage2" xml:space="preserve">
    <value>Please use the below token to reset your password with the &lt;code&gt;/accounts/reset-password&lt;/code&gt; api route:</value>
  </data>
  <data name="ResetPasswordSubject" xml:space="preserve">
    <value>Miboko - Reset Password</value>
  </data>
  <data name="VerificationFailed" xml:space="preserve">
    <value>Email verification failed</value>
  </data>
  <data name="VerificationMailHeader" xml:space="preserve">
    <value>&lt;h4&gt;Verify Email&lt;/h4&gt;&lt;p&gt;Thanks for registering!&lt;/p&gt;</value>
  </data>
  <data name="VerificationMailMessage1" xml:space="preserve">
    <value>Please click the below link to verify your email address:</value>
  </data>
  <data name="OnboardingAccessVerificationMailHeader" xml:space="preserve">
    <value>&lt;h4&gt;Miboko App Access&lt;/h4&gt;&lt;p&gt;Thanks for requesting access to the Miboko app!&lt;/p&gt;</value>
  </data>
  <data name="OnboardingAccessVerificationMailMessage1" xml:space="preserve">
    <value>We have confirmed your sensor subscription, please follow the link below on your smartphone to return to the miboko app and complete the app registration process.</value>
  </data>
  <data name="OnboardingVerificationMailSubject" xml:space="preserve">
    <value>Miboko App Registration</value>
  </data>
  <data name="VerificationMailMessage2" xml:space="preserve">
    <value>Please use the below token to verify your email address with the &lt;code&gt;/accounts/verify-email&lt;/code&gt; api route:</value>
  </data>
  <data name="VerificationMailSubject" xml:space="preserve">
    <value>Miboko - Verify your email</value>
  </data>
  <data name="VerificationNewMailHeader" xml:space="preserve">
    <value>&lt;h4&gt;Verify your new email&lt;/h4&gt;</value>
  </data>
  <data name="VerificationNewMailMessage" xml:space="preserve">
    <value>Please click the below link to verify your new email address:</value>
  </data>
  <data name="VerificationNewMailSubject" xml:space="preserve">
    <value>Miboko - Verify your new email</value>
  </data>
</root>